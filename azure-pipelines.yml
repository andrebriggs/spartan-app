# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

stages:
- stage: build
  jobs:
  - job: run_build
    pool:
      vmImage: 'Ubuntu 16.04'
    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.11' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
    steps:
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'

    - script: |
        # Login to Azure 
        echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
        az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
      workingDirectory: '$(modulePath)'
      displayName: 'Azure Login'

    - script: |
        # go version
        # # Login to Azure 
        # echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
        # az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
        # Use ACR build task to build and push
        echo "az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) ."
        az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) .
      workingDirectory: '$(modulePath)'
      displayName: 'ACR Build and Publish'

- stage: test
  dependsOn: build
  jobs:
  - job: run_tests
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: echo Test
    
# - stage: staging
#   dependsOn: test
#   jobs:
#   - job: deploy_staging
#     pool:
#       vmImage: 'Ubuntu 16.04'
#     steps:
#     - script: echo Staging

# - stage: prod
#   dependsOn: staging
#   jobs:
#   - job: deploy_prod
#     pool:
#       vmImage: 'Ubuntu 16.04'
#     steps:
#     - script: echo Prod
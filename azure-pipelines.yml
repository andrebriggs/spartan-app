# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master
- DEPLOY/*
- deploy/*

# Don't run against PRs
pr: none

variables:
- name: APP_NAME
  value: go-docker-k8s-demo

stages:
- stage: build
  jobs:
  - job: "run_build_push_acr"
    pool:
      vmImage: 'Ubuntu 16.04'
    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.11' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
    steps:
    - script: | 
        echo "****DEBUG STUFF****"
        echo "Build.SourceBranch: $(Build.SourceBranch)"
        echo "Build.SourceBranchName: $(Build.SourceBranchName)"
        echo "System.PullRequest.SourceRepositoryURI: $(System.PullRequest.SourceRepositoryURI)"
        echo "System.PullRequest.SourceBranch: $(System.PullRequest.SourceBranch)"
        echo "Build.Repository.Name: $(Build.Repository.Name)"
        echo "APP_NAME: $(APP_NAME)"
        pwd
        ls -la 
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'

    - script: |
        # Login to Azure 
        echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
        az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
      workingDirectory: '$(modulePath)'
      displayName: 'Azure Login'

    - script: |
        # go version
        # # Login to Azure 
        # echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
        # az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
        # Use ACR build task to build and push
        echo "az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) ."
        az acr build -r $(ACR_NAME) --image $(Build.Repository.Name):$(build.BuildNumber) .
      workingDirectory: '$(modulePath)'
      displayName: 'ACR Build and Publish'

- stage: hld_update
  dependsOn: build
  condition: and(succeeded('build'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/DEPLOY/'),eq(variables['Build.SourceBranchName'],'master')))
  jobs:
  - job: update_image_tag
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: |
        function get_fab_version() {
            if [ -z "$VERSION" ]
            then
                VERSIONS=$(curl -s https://api.github.com/repos/Microsoft/fabrikate/tags)
                LATEST_RELEASE=$(echo $VERSIONS | grep "name" | head -1)
                VERSION_TO_DOWNLOAD=`echo "$LATEST_RELEASE" | cut -d'"' -f 4`
            else
                echo "Fabrikate Version: $VERSION"
                VERSION_TO_DOWNLOAD=$VERSION
            fi
        }

        # Obtain OS to download the appropriate version of Fabrikate
        function get_os() {
            if [[ "$OSTYPE" == "linux-gnu" ]]; then
                eval "$1='linux'"
            elif [[ "$OSTYPE" == "darwin"* ]]; then
                eval "$1='darwin'"
            elif [[ "$OSTYPE" == "msys" ]]; then
                eval "$1='windows'"
            else
                eval "$1='linux'"
            fi
        }    

        # Download Fabrikate
        function download_fab() {
            echo "DOWNLOADING FABRIKATE"
            echo "Latest Fabrikate Version: $VERSION_TO_DOWNLOAD"
            os=''
            get_os os
            fab_wget=$(wget -SO- "https://github.com/Microsoft/fabrikate/releases/download/$VERSION_TO_DOWNLOAD/fab-v$VERSION_TO_DOWNLOAD-$os-amd64.zip" 2>&1 | egrep -i "302")
            if [[ $fab_wget == *"302 Found"* ]]; then
              echo "Fabrikate $VERSION_TO_DOWNLOAD downloaded successfully."
            else
                echo "There was an error when downloading Fabrikate. Please check version number and try again."
            fi
            wget "https://github.com/Microsoft/fabrikate/releases/download/$VERSION_TO_DOWNLOAD/fab-v$VERSION_TO_DOWNLOAD-$os-amd64.zip"
            unzip fab-v$VERSION_TO_DOWNLOAD-$os-amd64.zip -d fab
        }

        # Install Fabrikate
        function install_fab() {
            # Run this command to make script exit on any failure
            set -e
            export PATH=$PATH:$HOME/fab
            fab install
            echo "FAB INSTALL COMPLETED"
        }


        echo "RUN HELM INIT"
        helm init
        get_fab_version
        download_fab
        ls -la
        #install_fab
      displayName: 'Download Fabrikate'

    - script: |
        function git_connect() {
        pwd
            git clone https://automated:b69f2243a8cdf4c6b59fe2c46f7e67bb14e935cd@github.com/andrebriggs/fabrikate-spartan-cluster.git

            cd fabrikate-spartan-cluster
        }
        pwd
        git_connect
        git checkout -b "DEPLOY/$(Build.BuildNumber)"
        ../fab/fab set --subcomponent $(Build.Repository.Name) image.tag=$(Build.BuildNumber)

        echo "GIT STATUS"
        git status
        echo "GIT ADD (git add -A)"
        git add -A

        #Set git identity 
        git config user.email "admin@azuredevops.com"
        git config user.name "Automated Account"

        echo "GIT COMMIT"
        git commit -m "Updating image tag to $(Build.BuildNumber) for common environment"

        echo "GIT PUSH"
        git push https://b69f2243a8cdf4c6b59fe2c46f7e67bb14e935cd@github.com/andrebriggs/fabrikate-spartan-cluster.git

        cd ..
        wget https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz
        tar -xvf hub-linux-amd64-2.12.3.tgz
        cd fabrikate-spartan-cluster
        export GITHUB_TOKEN=b69f2243a8cdf4c6b59fe2c46f7e67bb14e935cd
        echo "Attempting to PR"
        ../hub-linux-amd64-2.12.3/bin/hub pull-request -p -m "Automated PR for $(Build.Repository.Name)" -r andrebriggs -a andrebriggs


- stage: testing
  dependsOn: hld_update
  # Won't run 
  condition: and(succeeded(), eq('foo', 'bar'))  
  jobs:
  - job: deploy_staging
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: |
        echo $(Build.SourceBranchName)
        pwd
        cd ..
        pwd
        ls -la
        wget https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz
        ls -la
        tar -xvf hub-linux-amd64-2.12.3.tgz
        ls -la
        ./hub-linux-amd64-2.12.3/bin/hub pull-request -m "This is automated"


# - stage: prod
#   dependsOn: staging
#   jobs:
#   - job: deploy_prod
#     pool:
#       vmImage: 'Ubuntu 16.04'
#     steps:
#     - script: echo Prod